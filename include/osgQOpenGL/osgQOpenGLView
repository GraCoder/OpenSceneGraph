#ifndef OSGQOPENGLVIEW_H
#define OSGQOPENGLVIEW_H

#ifdef __APPLE__
#   define __glext_h_
#   include <QtGui/qopengl.h>
#   undef __glext_h_
#   include <QtGui/qopenglext.h>
#endif

#include <osgQOpenGL/Export>
#include <OpenThreads/ReadWriteMutex>

#ifdef WIN32
//#define __gl_h_
#include <osg/GL>
#endif

#include <osg/ArgumentParser>

#include <QGraphicsView>
#include <QOpenGLFunctions>
#include <QReadWriteLock>

class OSGRenderer;

namespace osgViewer
{
    class Viewer;
}

class OSGQOPENGL_EXPORT osgQOpenGLView : public QGraphicsView,
    protected QOpenGLFunctions
{
    Q_OBJECT

protected:
    OSGRenderer* m_renderer {nullptr};
    bool _osgWantsToRenderFrame{true};
    OpenThreads::ReadWriteMutex _osgMutex;
    osg::ArgumentParser* _arguments {nullptr};
	bool _isFirstFrame {true};

    friend class OSGRenderer;
	friend class VOpenGLWidget;

public:
    osgQOpenGLView(QWidget* parent = nullptr);
    osgQOpenGLView(osg::ArgumentParser* arguments, QWidget* parent = nullptr);
    virtual ~osgQOpenGLView();

    /** Get osgViewer View */
    virtual osgViewer::Viewer* getOsgViewer();

    //! get mutex
    virtual OpenThreads::ReadWriteMutex* mutex();

signals:
    void initialized();

protected:

    //! call createRender. If overloaded, this method must send initialized signal at end
    virtual void initializeGL();

    virtual void resizeGL(int w, int h);

    //! lock scene graph and call osgViewer::frame()
    virtual void paintGL();

    //! called before creating renderer
    virtual void setDefaultDisplaySettings();

	void init();

	void resizeEvent(QResizeEvent *event);
    void keyPressEvent(QKeyEvent* event) override;
    void keyReleaseEvent(QKeyEvent* event) override;
    void mousePressEvent(QMouseEvent* event) override;
    void mouseReleaseEvent(QMouseEvent* event) override;
    void mouseDoubleClickEvent(QMouseEvent* event) override;
    void mouseMoveEvent(QMouseEvent* event) override;
    void wheelEvent(QWheelEvent* event) override;

    void createRenderer();

	void drawBackground(QPainter *painter, const QRectF &rect);
private:
};

#endif // OSGQOPENGLWIDGET_H
